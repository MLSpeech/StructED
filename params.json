{"name":"StructED","tagline":"Structured Prediction Package written in Java","body":"======\r\nREADME\r\n======\r\n\r\nStructED 1.0.0\r\n\r\nCopyright (C) Bar-Ilan  University\r\n\r\nThis is a README file for the Structure Prediction Package\r\n\r\n\t==========How to use===========\r\n\r\n\t==========TRAIN FILE===========\r\n\r\n\t=====Config file parmeters=====\r\n\r\nall the parameters should be as: parameter type then colon ( : ) and then the value of the parameter \r\n\r\n\t===============GENERAL================\r\n\r\nHere we present the configuration file which loads all the relevant parameters\r\nfirst we present the general parameters for every algorithm\r\nFew parameters are mandatory and the others are optional, we state for every parameter his condition\r\n\r\n\r\n - train_path:\t\t\t\t\t\t\t the path to the training set data - Mandatory \r\n - w_output:\t\t\t\t\t\t\t output file of the weights vector (model)\t\r\n\r\n - type:\t\t\t\t\t\t\t the algorithm type - Mandatory\r\n \t\t\t\t\t\t\t\t 0 - Passive Aggressive\r\n\t\t\t\t\t\t\t\t 1 - SVM\r\n\t\t\t\t\t\t\t\t 2 - Direct Loss\r\n\t\t\t\t\t\t\t\t 3 - CRF\r\n\t\t\t\t\t\t\t\t 4 - Ramp Loss\r\n\t\t\t\t\t\t\t\t 5 - Probit Loss\r\n\t\t\t\t\t\t\t\t 6 - RankSVM \r\n\t\t\t\t\t\t\t\t\r\n - task:\t\t\t\t\t\t\t the cost/loss function number - Mandatory\r\n \r\n - epoch:\t\t\t\t\t\t\t the number of epochs on the data - Mandatory\r\n \r\n - task_param:\t\t\t\t\t\t\t cost/loss parameters if needed - Optional\r\n \r\n - kernel:\t\t\t\t\t\t\t kernel type, and parameters(i.e sigma) - Optional\r\n \t\t\t\t\t\t\t\t 0 - poly 2 degree\r\n\t\t\t\t\t\t\t\t 1 - RBF 2nd taylor approximation\r\n\t\t\t\t\t\t\t\t 2 - RBF 3nd taylor approximation\t\r\n\t\t\t\t\t\t\t\t\r\n - init_w:\t\t\t\t\t\t\t the path for the initial weights - Optional\r\n \r\n - phi:\t\t\t\t\t\t\t\t feature function type - Mandatory\r\n \r\n - prediction:\t\t\t\t\t\t\t prediction function, should implement also the loss-augmented function - Mandatory\r\n \r\n - reader:\t\t\t\t\t\t\t reader type - Mandatory\r\n - writer:\t\t\t\t\t\t\t writer type - Mandatory\r\n \t\t\t\t\t\t\t\t for both reader and writer\r\n\t\t\t\t\t\t\t\t use 0 for standard form\r\n\t\t\t\t\t\t\t\t use 1 for standard rank form (as Letor 3.0)\r\n \r\n - size_of_vector:\t\t\t\t\t\t size of vector after the feature mapping functions - Mandatory\r\n  \r\n\tRELEVANT FILES: taskLoss, phiConverter and prediction interfaces and the Factory class\r\n\r\n  for the task, phi and prediction the user should implement the taskLoss, phiConverter and prediction interfaces\r\n  after implementing those interfaces the Factory class should be updated by to support the new classes that we've just implement\r\n  we do this by adding another case to the switch-case statement at the getClassifier function\r\n \r\n\r\n\t   =======================================\r\n\t   ===============SPECIFIC================\r\n\r\n parameters for the algorithm, will be different for each algorithm - Mandatory\r\n\r\n\t===PA===\t\t\t\t\t\t\t\t\t   \r\n - c: \t\t\t\t C parameter for the PA algorithm\t\t\t\t\r\n\r\n\r\n\t===SVM===\t\t\t\t\t\t\t  \r\n - lambda:\t\t\t\t lambda parameter for the SVM\t\t\t\t\t\t\r\n - eta:\t\t\t\t eta - learning rate\r\n\t\t\t    \r\n\t\t\t\t\t\t  \r\n\t===DL===\t\t\t\t\t\t\t\t\t   \r\n - eta:\t\t\t\t eta - learning rate\r\n - epsilon:\t\t\t epsilon parameter for the DL\t   \r\n\t\t\t\t\t\t  \r\n\r\n\t===CRF===\t\r\n - eta:\t\t\t\t eta - learning rate\r\n - lambda:\t\t\t\t lambda parameter for the CRF\t\t\t\t  \t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t \t\t\t\t\t\t  \t\t\t\t\t\t  \r\n\t===RL===\t\r\n - eta:\t\t\t\t eta - learning rate\r\n - lambda:\t\t\t\t lambda parameter for the RL\t\t\t\t  \t\t\t\r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t  \r\n\t===PL===\t\r\n - eta:\t\t\t\t eta - learning rate\r\n - lambda:\t\t\t\t lambda parameter for the PL\t\r\n - num_of_iteration:\t\t number of iteration for generation noise\t\t\t  \r\n\r\n\t\t\t\t\t\t  \t\t\t\t\t\t  \r\n\t===RankSVM===\t\t\t\t\t\t  \r\n - lambda:\t\t\t\t lambda parameter for the RankSVM\t\t\t\t\t\r\n - eta\t\t\t\t eta - learning rate\t\t\t    \r\n\r\n==============================================================\r\n\r\n\t==========TEST FILE===========\r\n - test_path:\t\t\t\t\t\t\t the path to the test set data - Mandatory \r\n\r\n - output_file:\t\t\t\t\t\t\t the output file for the scores - Mandatory \r\n\r\n - w_path:\t\t\t\t\t\t\t\t the weights vector(model) - Mandatory \r\n\r\n - examples_2_display:\t\t\t\t\t\t how many examples to display in the scores file - Mandatory\r\n\r\n - task:\t\t\t\t\t\t\t\t the loss(cost) function, the same as the train - Mandatory\r\n\r\n - kernel:\t\t\t\t\t\t\t\t kernel type, and parameters(i.e sigma) - Optional\r\n \t\t\t\t\t\t\t\t 0 - poly 2 degree\r\n\t\t\t\t\t\t\t\t 1 - RBF 2nd taylor approximation\r\n\t\t\t\t\t\t\t\t 2 - RBF 3nd taylor approximation\r\n\t\r\n - phi:\t\t\t\t\t\t\t\t feature function type - Mandatory\r\n\r\n - prediction:\t\t\t\t\t\t\t prediction function, should implement also the loss-augmented function - Mandatory\r\n\r\n - reader:\t\t\t\t\t\t\t\t reader type - Mandatory\r\n - writer:\t\t\t\t\t\t\t\t writer type - Mandatory\r\n \t\t\t\t\t\t\t\t for both reader and writer\r\n\t\t\t\t\t\t\t\t use 0 for standard form\r\n\t\t\t\t\t\t\t\t use 1 for standard rank form (as Letor 3.0)\r\n\r\n - size_of_vector:\t\t\t\t\t\t\t size of vector after the feature mapping functions - Mandatory\r\n\r\n==========================Examples===========================\r\n\r\n We provided three examples of implementation of all the interferes that was mentioned above\r\n\r\n The first one is dummy data\r\n The second one is the MNIST dataset\r\n The third one is the letor 3.0 dataset\r\n\r\n All the examples can be found on our website\r\n\r\n=============================================================\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}